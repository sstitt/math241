variables = c(asian = "DP05_0080E",
white = "DP05_0077E",
black = "DP05_0078E",
hispanic = "DP05_0070E"),
state = "CA",
county = "Santa Clara",
survey = "acs5",
output = "wide",
geometry = TRUE)
View(scc_2018)
full_join()
scc_2018 <- get_acs(geography = "tract",
year = 2018,
variables = c(asian = "DP05_0080E",
white = "DP05_0077E",
black = "DP05_0078E",
hispanic = "DP05_0070E"),
state = "CA",
county = "Santa Clara",
survey = "acs5",
output = "wide",
geometry = TRUE)
scc_2019 <- get_acs(geography = "tract",
year = 2019,
variables = c(asian = "DP05_0080E",
white = "DP05_0077E",
black = "DP05_0078E",
hispanic = "DP05_0070E"),
state = "CA",
county = "Santa Clara",
survey = "acs5",
output = "wide",
geometry = TRUE)
scc_2020 <- get_acs(geography = "tract",
year = 2020,
variables = c(asian = "DP05_0080E",
white = "DP05_0077E",
black = "DP05_0078E",
hispanic = "DP05_0070E"),
state = "CA",
county = "Santa Clara",
survey = "acs5",
output = "wide",
geometry = TRUE)
scc_2021 <- get_acs(geography = "tract",
year = 2021,
variables = c(asian = "DP05_0080E",
white = "DP05_0077E",
black = "DP05_0078E",
hispanic = "DP05_0070E"),
state = "CA",
county = "Santa Clara",
survey = "acs5",
output = "wide",
geometry = TRUE)
scc_2022 <- get_acs(geography = "tract",
year = 2022,
variables = c(asian = "DP05_0080E",
white = "DP05_0077E",
black = "DP05_0078E",
hispanic = "DP05_0070E"),
state = "CA",
county = "Santa Clara",
survey = "acs5",
output = "wide",
geometry = TRUE)
scc_18_22 <- full_join(scc_2018, scc_2019)
scc_18_22 <- st_join(scc_2018, scc_2019)
View(scc_18_22)
?st_join
scc_18_22 <- st_join(scc_2018, scc_2019)
View(scc_18_22)
View(scc_2018)
View(scc_2019)
scc_18_22 <- st_join(scc_18_22, scc_2020)
View(scc_18_22)
v21 <- load_variables(2021, "acs5", cache = TRUE)
View(v21)
scc_2018 <- get_acs(geography = "tract",
year = 2022,
variables = c(total_pop = "B03002_001",
white_pop = "B03002_003",
black_pop = "B03002_004",
asian_pop = "B03002_006",
hisp_pop = "B03002_012"),
state = "CA",
county = "Santa Clara",
survey = "acs5",
output = "wide",
geometry = TRUE)
scc_18_22 <- get_acs(geography = "tract",
year = 2022,
variables = c(total_pop = "B03002_001",
white_pop = "B03002_003",
black_pop = "B03002_004",
asian_pop = "B03002_006",
hisp_pop = "B03002_012"),
state = "CA",
county = "Santa Clara",
survey = "acs5",
output = "wide",
geometry = TRUE)
View(scc_18_22)
?prop.test
?proportions
?summarize
View(scc_18_22)
scc_18_22 <- scc_18_22 %>%
mutate(perc_asian = n(asian_popE)/n(total_popE),
perc_white = n(white_popE)/n(total_popE),
perc_black = n(black_popE)/n(total_popE),
perc_hisp = n(hisp_popE)/n(total_popE))
View(scc_18_22)
scc_18_22 <- scc_18_22 %>%
mutate(perc_asian = asian_popE/total_popE,
perc_white = white_popE/total_popE,
perc_black = black_popE/total_popE,
perc_hisp = hisp_popE/total_popE)
View(scc_18_22)
View(or_tracts)
tm_shape(scc_18_22) +
tm_polygons(col = "perc_asian", style = "quantile", palette = "BuGn", title = "Median Household Income") +
tm_layout(main.title = "Median Household Income in Multnomah County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
tm_shape(scc_18_22) +
tm_polygons(col = "perc_asian", style = "quantile", palette = "BuGn", title = "Median Household Income") +
tm_layout(main.title = "Percentage of Non-Hispanic Asian Population in Santa Clara County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
tm_shape(scc_18_22) +
tm_polygons(col = "perc_asian", style = "quantile", palette = "BuGn", title = "Median Household Income") +
tm_layout(main.title = "Percentage of Non-Hispanic Asian Population \nin Santa Clara County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
tm_shape(scc_18_22) +
tm_polygons(col = "perc_asian", style = "quantile", palette = "BuGn", title = "Percentage of Non-Hispanic Asian") +
tm_layout(main.title = "Percentage of Non-Hispanic Asian Population \nin Santa Clara County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
tm_shape(scc_18_22) +
tm_polygons(col = "perc_white", style = "quantile", palette = "BuGn", title = "Percentage of Non-Hispanic White") +
tm_layout(main.title = "Percentage of Non-Hispanic White Population \nin Santa Clara County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
tm_shape(scc_18_22) +
tm_polygons(col = "perc_black", style = "quantile", palette = "BuGn", title = "Percentage of Non-Hispanic Asian") +
tm_layout(main.title = "Percentage of Non-Hispanic Black Population \nin Santa Clara County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
tm_shape(scc_18_22) +
tm_polygons(col = "perc_hisp", style = "quantile", palette = "BuGn", title = "Percentage of Hispanic") +
tm_layout(main.title = "Percentage of Hispanic Population \nin Santa Clara County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
scc_hh_income_18_22 <- get_acs(geography = "tract",
year = 2022,
variables = c(median_hh_income = "B25077_001"),
state = "CA",
county = "Santa Clara",
survey = "acs5",
output = "wide",
geometry = TRUE)
scc_18_22 <- scc_18_22 %>% get_acs(geography = "tract",
year = 2022,
variables = c(median_hh_income = "B25077_001"),
state = "CA",
county = "Santa Clara",
survey = "acs5",
output = "wide",
geometry = TRUE)
scc_hh_income_18_22 <- get_acs(geography = "tract",
year = 2022,
variables = c(median_hh_income = "B25077_001",
total_pop = "B03002_001",
white_pop = "B03002_003",
black_pop = "B03002_004",
asian_pop = "B03002_006",
hisp_pop = "B03002_012"),
state = "CA",
county = "Santa Clara",
survey = "acs5",
output = "wide",
geometry = TRUE)
tm_shape(scc_hh_income_18_22) +
tm_polygons(col = "median_hh_income", style = "quantile", palette = "BuGn", title = "Percentage of Hispanic") +
tm_layout(main.title = "Percentage of Hispanic Population \nin Santa Clara County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
View(scc_hh_income_18_22)
tm_shape(scc_hh_income_18_22) +
tm_polygons(col = "median_hh_incomeE", style = "quantile", palette = "BuGn", title = "Percentage of Hispanic") +
tm_layout(main.title = "Percentage of Hispanic Population \nin Santa Clara County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
tm_shape(scc_hh_income_18_22) +
tm_polygons(col = "median_hh_incomeE", style = "quantile", palette = "BuGn", title = "Median Household Income") +
tm_layout(main.title = "Median Household Income \nin Santa Clara County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
scc_hh_income_18_22 <- get_acs(geography = "tract",
year = 2022,
variables = c(median_hh_income = "B19013_001",
total_pop = "B03002_001",
white_pop = "B03002_003",
black_pop = "B03002_004",
asian_pop = "B03002_006",
hisp_pop = "B03002_012"),
state = "CA",
county = "Santa Clara",
survey = "acs5",
output = "wide",
geometry = TRUE)
tm_shape(scc_hh_income_18_22) +
tm_polygons(col = "median_hh_incomeE", style = "quantile", palette = "BuGn", title = "Median Household Income") +
tm_layout(main.title = "Median Household Income \nin Santa Clara County, 2018-2022",
main.title.position = "center",
legend.outside = TRUE)
# Do not modify this chunk.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Put all necessary libraries here
library(tidyverse)
library(rnoaa)
library(rvest)
library(httr)
# Don't forget to install it first!
library(rnoaa)
options(noaakey = "olfVllAdvgxTnItbErwMcSJwVUCKtoVh")
stations <- ncdc_stations(datasetid = "GHCND",
locationid = "FIPS:41051")
mult_stations <- stations$data
View(stations)
View(mult_stations)
# First fill-in and run to following to determine the
# datatypeid
ncdc_datatypes(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006")
# Now grab the data using ncdc()
precip_se_pdx <- ncdc()
View(precip_se_pdx)
# First fill-in and run to following to determine the
# datatypeid
ncdc_datatypes(datasetid = "GHCND",
stationid = "US1ORMT0006")
# Now grab the data using ncdc()
precip_se_pdx <- ncdc()
# First fill-in and run to following to determine the
# datatypeid
ncdc_datatypes(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006")
# Now grab the data using ncdc()
precip_se_pdx <- ncdc()
class(precip_se_dpx)
class("precip_se_dpx")
View(precip_se_pdx)
ncdc_datatypes(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006")
precip_se_pdx <- ncdc(ncdc_datatypes)
precip_se_pdx <- ncdc()
# First fill-in and run to following to determine the
# datatypeid
ncdc_datatypes(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006")
# Now grab the data using ncdc()
precip_se_pdx <- ncdc()
View(stations)
View(precip_se_pdx[["data"]])
View(precip_se_pdx)
precip_se_dpx_data <- precip_se_dpx[[2]]
precip_se_pdx_data <- precip_se_pdx[[2]]
View(precip_se_pdx_data)
# First fill-in and run to following to determine the
# datatypeid
ncdc_datatypes(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006")
# Now grab the data using ncdc()
precip_se_pdx <- ncdc()
precip_se_pdx <- ncdc("GHCND")
precip_se_pdx <- ncdc("GHCND:US1ORMT0006")
precip_se_pdx <- ncdc()
precip_se_pdx_data <- precip_se_pdx[[2]]
precip_se_pdx_data <- precip_se_pdx[[2]]
ncdc_datatypes(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006")
precip_se_pdx <- ncdc()
ncdc_datatypes(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006")
precip_se_pdx <- ncdc()
ncdc_datatypes(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006")
ncdc_datatypes(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006")
precip_se_pdx <- ncdc(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006",
datatypeid = "PRCP",
startdate = "2023-01-01",
enddate = "2023-01-31")
precip_se_pdx
# First fill-in and run to following to determine the
# datatypeid
ncdc_datatypes(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006")
# Now grab the data using ncdc()
precip_se_pdx <- ncdc()
precip_se_pdx <- ncdc(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006",
datatypeid = "PRCP",
startdate = "2023-01-01",
enddate = "2023-01-31")
precip_se_pdx
precip_se_pdx_data <- precip_se_pdx[[2]]
class("precip_se_pdx")
View(precip_se_pdx_data)
View(precip_se_pdx_data)
precip_se_pdx_data <- precip_se_pdx_data %>%
mutate(data = ymd_hms(paste(data)))
precip_se_pdx_data <- precip_se_pdx_data %>%
mutate(data = ymd_hms(paste(date)))
View(precip_se_pdx_data)
precip_se_pdx_data <- precip_se_pdx_data %>%
mutate(date = ymd_hms(paste(date)))
precip_se_pdx_data <- precip_se_pdx_data %>%
mutate(date = ymd_hms(paste(date)))
precip_se_pdx_data <- precip_se_pdx_data %>%
mutate(date = ymd_hms(paste(date)))
precip_se_pdx_data <- precip_se_pdx_data %>%
mutate(date = ymd_hms(paste(date)))
View(precip_se_pdx_data)
precip_se_pdx_data <- precip_se_pdx_data %>%
mutate(fixeddate = ymd_hms(paste(date)))
precip_se_pdx_data <- precip_se_pdx_data %>%
mutate(fixeddate = ymd_hms(paste(date)))
# Do not modify this chunk.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Put all necessary libraries here
library(tidyverse)
library(rnoaa)
library(rvest)
library(httr)
# Don't forget to install it first!
library(rnoaa)
precip_se_pdx_data <- precip_se_pdx[[2]]
# Do not modify this chunk.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Put all necessary libraries here
library(tidyverse)
library(rnoaa)
library(rvest)
library(httr)
# Don't forget to install it first!
library(rnoaa)
# First fill-in and run to following to determine the
# datatypeid
ncdc_datatypes(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006")
# Now grab the data using ncdc()
precip_se_pdx <- ncdc()
precip_se_pdx <- ncdc(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006",
datatypeid = "PRCP",
startdate = "2023-01-01",
enddate = "2023-01-31")
precip_se_pdx
# Do not modify this chunk.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Put all necessary libraries here
library(tidyverse)
library(rnoaa)
library(rvest)
library(httr)
# Don't forget to install it first!
library(rnoaa)
options(noaakey = "olfVllAdvgxTnItbErwMcSJwVUCKtoVh")
stations <- ncdc_stations(datasetid = "GHCND",
locationid = "FIPS:41051")
mult_stations <- stations$data
# First fill-in and run to following to determine the
# datatypeid
ncdc_datatypes(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006")
# Now grab the data using ncdc()
precip_se_pdx <- ncdc()
precip_se_pdx <- ncdc(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006",
datatypeid = "PRCP",
startdate = "2023-01-01",
enddate = "2023-01-31")
precip_se_pdx
View(precip_se_pdx)
precip_se_pdx_data <- precip_se_pdx[[2]]
precip_se_pdx_data <- precip_se_pdx_data %>%
mutate(fixeddate = ymd_hms(paste(date)))
View(precip_se_pdx_data)
View(precip_se_pdx)
View(precip_se_pdx_data)
ggplot(precip_se_pdx_data, aes(x = fixeddate, y = value)) +
geom_point()
View(precip_se_pdx_data)
# First fill-in and run to following to determine the
# datatypeid
ncdc_datatypes(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006")
# Now grab the data using ncdc()
precip_se_pdx <- ncdc()
View(precip_se_pdx_data)
ggplot(precip_se_pdx_data, aes(x = fixeddate, y = value)) +
geom_point() +
labs(title = "Precipitation in Portland in January 2023", x = "Date")
precip_se_pdx <- ncdc(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006",
datatypeid = "PRCP",
startdate = "2021-01-01",
enddate = "2024-01-31")
precip_se_pdx
precip_se_pdx_bonus <- ncdc(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006",
datatypeid = "PRCP",
startdate = "2021-01-01",
enddate = "2024-01-31")
precip_se_pdx_bonus
View(precip_se_pdx_bonus)
precip_se_pdx_bonus <- ncdc(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006",
datatypeid = "PRCP",
startdate = "2020-01-01",
enddate = "2023-01-31")
precip_se_pdx_bonus
precip_se_pdx_bonus <- ncdc(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006",
datatypeid = "PRCP",
startdate = "2020-01-01",
enddate = "2023-01-31")
precip_se_pdx_bonus
precip_se_pdx_2020 <- ncdc(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006",
datatypeid = "PRCP",
startdate = "2020-01-01",
enddate = "2020-01-31")
precip_se_pdx_2020 <- ncdc(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006",
datatypeid = "PRCP",
startdate = "2020-01-01",
enddate = "2020-01-31")
precip_se_pdx_2020_data <- precip_se_pdx_2020[[2]]
precip_se_pdx_2020_data <- precip_se_pdx_2020_data %>%
mutate(fixeddate = ymd_hms(paste(date)))
View(precip_se_pdx_2020_data)
precip_se_pdx_2020 <- ncdc(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006",
datatypeid = "PRCP",
startdate = "2020-01-01",
enddate = "2020-01-31")
precip_se_pdx_2020_data <- precip_se_pdx_2020[[2]]
precip_se_pdx_2020_data <- precip_se_pdx_2020_data %>%
mutate(fixeddate = ymd_hms(paste(date)))
precip_se_pdx_2021 <- ncdc(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006",
datatypeid = "PRCP",
startdate = "2021-01-01",
enddate = "2021-01-31")
precip_se_pdx_2021_data <- precip_se_pdx_2021[[2]]
precip_se_pdx_2021_data <- precip_se_pdx_2021_data %>%
mutate(fixeddate = ymd_hms(paste(date)))
precip_se_pdx_2022 <- ncdc(datasetid = "GHCND",
stationid = "GHCND:US1ORMT0006",
datatypeid = "PRCP",
startdate = "2022-01-01",
enddate = "2022-01-31")
precip_se_pdx_2022_data <- precip_se_pdx_2022[[2]]
precip_se_pdx_2022_data <- precip_se_pdx_2022_data %>%
mutate(fixeddate = ymd_hms(paste(date)))
precip_se_pdx_20_23 <- full_join(precip_se_pdx_2020, precip_se_pdx_2021)
precip_se_pdx_20_23 <- full_join(precip_se_pdx_2020_data, precip_se_pdx_2021_data)
```
precip_se_pdx_20_23 <- full_join(precip_se_pdx_2020_data, precip_se_pdx_2021_data)
precip_se_pdx_20_23 <- full_join(precip_se_pdx_20_23, precip_se_pdx_2022_data)
precip_se_pdx_20_23 <- full_join(precip_se_pdx_20_23, precip_se_pdx_2023_data)
precip_se_pdx_20_23 <- full_join(precip_se_pdx_20_23, precip_se_pdx_data)
View(precip_se_pdx_20_23)
View(precip_se_pdx_2020_data)
View(precip_se_pdx_20_23)
?year
precip_se_pdx_20_23 <- precip_se_pdx_20_23 %>%
mutate(year = year(paste(fixeddate)))
View(precip_se_pdx_20_23)
ggplot(precip_se_pdx_20_23, aes(x = fixeddate, y = value)) +
geom_point() +
facet_wrap(~year) +
labs(title = "Comparing Precipitation in Portland in January of 2020-2023", x = "Date")
?md
precip_se_pdx_20_23 <- precip_se_pdx_20_23 %>%
mutate(year = year(paste(fixeddate))) %>%
mutate(mday = mday(paste(fixeddate)))
View(precip_se_pdx_20_23)
View(precip_se_pdx_2020_data)
ggplot(precip_se_pdx_20_23, aes(x = mday, y = value)) +
geom_point() +
facet_wrap(~year) +
labs(title = "Comparing Precipitation in Portland in January of 2020-2023", x = "Date")
install.packages("spotifyr")
install.packages("spotifyr")
get_spotify_access_token()
library(spotifyr)
get_spotify_access_token()
get_spotify_access_token(client_id = Sys.getenv("SPOTIFY_CLIENT_ID"),
client_secret = Sys.getenv("SPOTIFY_CLIENT_SECRET"))
access_token <- get_spotify_access_token()
?get_spotify_access_token
get_spotify_authorization_code(
client_id = Sys.getenv("SPOTIFY_CLIENT_ID"),
client_secret = Sys.getenv("SPOTIFY_CLIENT_SECRET"),
scope = scopes())
