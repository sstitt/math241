---
title: "Lab 8"
date: "Math 241, Week 11"
format: html
editor: visual
---

```{r}
#| label: setup
#| message: false
#| echo: false
library(tidyverse)
library(tidymodels)
library(openintro)
library(mdsr)
library(mosaicData)
library(shiny)
knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE,
  warning = FALSE)
```

## Due: Friday, April 12th at 8:30am

## Goals of this lab

-   In this lab, you will work with observational data to assess the relationship between an exposure and the incidence of a disease.
-   You will practice bootstrap to calculate a 95%CI.
-   You will create an interactive web application with `shiny`.

## Exercise 1:

The `Whickham` data set in the `mosaicData` package includes data on age, smoking, and mortality from a one-in-six survey of the electoral roll in Whickham, a mixed urban and rural district near Newcastle upon Tyne, in the United Kingdom. The survey was conducted in 1972--1974 to study heart disease and thyroid disease. A follow-up on those in the survey was conducted 20 years later. Describe the association between smoking status and mortality in this study. Be sure to consider the role of age as a possible confounding factor.

The death rate based on the data is on average higher for smokers that are young and middle aged. However, the death rate for older smokers is slightly lower. This study concludes that smoking for youth is bad for health and can lead to an early death. Because the death rates vary based on age, it suggests age may be a confounding factor.

```{r}
data(Whickham)
str(Whickham)

# Summary statistics
summary(Whickham)
```

## Exercise 2:

a)  Calculate the mean age of birthing people from the `Gestation` data set from the `mosaicData` package.

    The mean age of birthing people is 27.26.

```{r}
gestation <- data("Gestation")
gestation_age <- Gestation %>% 
  summarize(mean_age = mean(age, na.rm = TRUE))
gestation_age
```

b)  Use the bootstrap to generate and interpret a 95% confidence interval for the mean age of birthing people.

    The 95% confidence interval for the mean age of birthing people is (26.93, 27.58).

```{r}
bootstrap_means <- Gestation %>%
  rep_sample_n(size = nrow(Gestation), replace = TRUE, reps = 1000) %>%
group_by(replicate) %>% 
  summarize(x_bar = mean(age, na.rm = TRUE)) 
bootstrap_means %>%
  slice_head(n = 10)

stats <- bootstrap_means %>%
  summarize(avg_age = mean(x_bar),
            se_age = sd(x_bar))

stats <- stats  %>%
  mutate(lower_bound = avg_age - 2*se_age,
         upper_bound = avg_age + 2*se_age)
stats
```

## Exercise 3:

Using data from the `palmerpenguins` package, create a Shiny app that displays measurements from the penguins dataframe. Allow the user to select a species or a gender, and to choose between various attributes on a scatterplot. (Hint: examples of similar apps can be found at the Shiny gallery).

```{r}
data(penguins)
ui <- fluidPage(
  
  titlePanel("Palmer Penguins Data Explorer"),
  
  sidebarLayout(
    sidebarPanel(
      selectInput(inputId = "species",
                  label = "Select Species:",
                  choices = unique(penguins$species),
                  selected = NULL),
      
      selectInput(inputId = "gender",
                  label = "Select Gender:",
                  choices = c("Male", "Female"),
                  selected = NULL),
      
      selectInput(inputId = "attribute",
                  label = "Select Attribute:",
                  choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
                  selected = "bill_length_mm"),
      submitButton("Update Results!")
    ),
    

    mainPanel(
      plotOutput(outputId = "scatterplot")
    )
  )
)

server <- function(input, output) {
  output$scatterplot <- renderPlot({
    filtered_penguins <- penguins %>%
      filter(species == input$species, sex == input$gender)
    
    if (nrow(filtered_penguins) == 0) {
      plot(1, type = "n", main = "No data available")
      return()
    }
    
    max_x <- max(filtered_penguins$bill_length_mm, na.rm = TRUE)
    if (!is.finite(max_x) || max_x <= 0) {
      max_x <- 50  # Set a default maximum value if max_x is not valid
    }
    
    max_y <- max(filtered_penguins$bill_depth_mm, na.rm = TRUE)
    if (!is.finite(max_y) || max_y <= 0) {
      max_y <- 50  # Set a default maximum value if max_y is not valid
    }
    
    if (!is.finite(max_x) || !is.finite(max_y)) {
      plot(1, type = "n", main = "Invalid data")
      return()
    }
    
    plot(filtered_penguins$bill_length_mm, 
         filtered_penguins$bill_depth_mm,
         xlab = "Bill Length (mm)",
         ylab = "Bill Depth (mm)",
         main = "Scatterplot of Bill Length vs. Bill Depth",
         xlim = c(0, max_x),  
         ylim = c(0, max_y)) 
  })
}



shinyApp(ui = ui, server = server)
```
